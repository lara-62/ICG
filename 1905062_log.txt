Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID	
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 1: Token <ID> Lexeme c found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration	: type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 3: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 3: Token <ID> Lexeme func_a found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <ID> Lexeme a found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 4: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements	: statement
Line# 5: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	1--> <c, INT> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme foo found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 8: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements	: statement
Line# 9: Token <RETURN> Lexeme return found
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 10: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	10--> <a, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	6--> <foo, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme bar found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 13: Token <COMMA> Lexeme , found
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 13: Token <RPAREN> Lexeme ) found
Line# 13: Token <LCURL> Lexeme { found
Line# 16: Token <ID> Lexeme c found
Line# 16: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 16: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 16: Token <MULOP> Lexeme * found
Line# 16: Token <ID> Lexeme a found
Line# 16: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : term MULOP unary_expression
simple_expression : term
Line# 16: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 16: Token <MULOP> Lexeme * found
Line# 16: Token <ID> Lexeme b found
Line# 16: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : term MULOP unary_expression
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements	: statement
Line# 18: Token <RETURN> Lexeme return found
Line# 18: Token <ID> Lexeme c found
Line# 18: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 19: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 4
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <c, INT> <bar, FUNCTION, INT> 
	6--> <foo, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 21: Token <INT> Lexeme int found
type_specifier : INT
Line# 21: Token <ID> Lexeme main found
Line# 21: Token <LPAREN> Lexeme ( found
Line# 21: Token <RPAREN> Lexeme ) found
Line# 21: Token <LCURL> Lexeme { found
Line# 23: Token <INT> Lexeme int found
type_specifier : INT
Line# 23: Token <ID> Lexeme i found
Line# 23: Token <COMMA> Lexeme , found
declaration_list : ID	
Line# 23: Token <ID> Lexeme j found
Line# 23: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 23: Token <ID> Lexeme k found
Line# 23: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 23: Token <ID> Lexeme l found
Line# 23: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration	: type_specifier declaration_list SEMICOLON
statement : var_declaration
statements	: statement
Line# 25: Token <ID> Lexeme i found
Line# 25: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 25: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 25: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 26: Token <ID> Lexeme j found
Line# 26: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 26: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 26: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 28: Token <ID> Lexeme func_a found
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <RPAREN> Lexeme ) found
argument_list	: 
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 29: Token <PRINTLN> Lexeme println found
Line# 29: Token <LPAREN> Lexeme ( found
Line# 29: Token <ID> Lexeme a found
Line# 29: Token <RPAREN> Lexeme ) found
Line# 29: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 31: Token <ID> Lexeme k found
Line# 31: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 31: Token <ID> Lexeme foo found
Line# 31: Token <LPAREN> Lexeme ( found
Line# 31: Token <ID> Lexeme i found
Line# 31: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments	: logic_expression
argument_list	: arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 31: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 32: Token <PRINTLN> Lexeme println found
Line# 32: Token <LPAREN> Lexeme ( found
Line# 32: Token <ID> Lexeme k found
Line# 32: Token <RPAREN> Lexeme ) found
Line# 32: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 35: Token <ID> Lexeme l found
Line# 35: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 35: Token <ID> Lexeme bar found
Line# 35: Token <LPAREN> Lexeme ( found
Line# 35: Token <ID> Lexeme i found
Line# 35: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments	: logic_expression
Line# 35: Token <ID> Lexeme j found
Line# 35: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments	: arguments COMMA logic_expression
argument_list	: arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 35: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 36: Token <PRINTLN> Lexeme println found
Line# 36: Token <LPAREN> Lexeme ( found
Line# 36: Token <ID> Lexeme l found
Line# 36: Token <RPAREN> Lexeme ) found
Line# 36: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 38: Token <ID> Lexeme j found
Line# 38: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 38: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 38: Token <MULOP> Lexeme * found
Line# 38: Token <ID> Lexeme bar found
Line# 38: Token <LPAREN> Lexeme ( found
Line# 38: Token <ID> Lexeme i found
Line# 38: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments	: logic_expression
Line# 38: Token <ID> Lexeme j found
Line# 38: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments	: arguments COMMA logic_expression
argument_list	: arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : term MULOP unary_expression
Line# 38: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 38: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 38: Token <ADDOP> Lexeme - found
simple_expression : simple_expression ADDOP term
Line# 38: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 38: Token <MULOP> Lexeme * found
Line# 38: Token <ID> Lexeme foo found
Line# 38: Token <LPAREN> Lexeme ( found
Line# 38: Token <ID> Lexeme i found
Line# 38: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments	: logic_expression
argument_list	: arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : term MULOP unary_expression
Line# 38: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 39: Token <PRINTLN> Lexeme println found
Line# 39: Token <LPAREN> Lexeme ( found
Line# 39: Token <ID> Lexeme j found
Line# 39: Token <RPAREN> Lexeme ) found
Line# 39: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 42: Token <RETURN> Lexeme return found
Line# 42: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 42: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 43: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 5
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	10--> <l, INT> 
	ScopeTable# 1
	1--> <c, INT> <bar, FUNCTION, INT> 
	2--> <main, FUNCTION, INT> 
	6--> <foo, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total Lines: 45
Total Errors: 0
